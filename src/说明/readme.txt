==========================================================================
						文档结构
==========================================================================

+app----+              //任务类      
|    	+thread_insert.c  充电任务   
|    	+thread_comm.c    通讯任务  
|    	+thread_channel.c 仓道任务(读数据，状态检测，错误处理)   
|    	+main.c       主程序
|       +config.c     应用层配置(常量)
|       +config.h     应用层参数配置(可视化配置)
|
|
+system-+              //非任务，功能操作
|       |
|       +channel.c        与仓道操作相关(数据，地址，状态，灯....)
|	    +channel_read.c   读充电宝操作(1.统一iic与ir 标准化接口  2.接口使用查询方式 3.包含iir,ir的选择策略)  
|	    +queue.c          充电排队算法
|       +packet.c         485通讯的 接收 发送 
|	    +system.c         系统参数读写，系统灯
|
+contiki:+            //非抢占式 内核
|        |
|        +autostart.c      自动运行相关
|        +etimer.c         事件定时器
|        +process.c        任务，调度，事件，延时 相关
|        +timer.c          定时器
|
+portable:+           //内核移植 clock
|         |
|         +clodk.c      时钟(contiki以时钟滴答来驱动)
|	  
+dev:----+            //底层驱动模型
|        |
|        +driver_config.c      底层驱动配置文件
|        +dev.c                初始化，重定向文件
|        +gpio.c               io
|        +iic.c                iic + bq27541 + 标准化接口 (三部分程序)
|        +uart.c               串口驱动
|        +ir.c                 红外，使用定时器方式
|        +74hc595.c            扩展io
|        +timer.c              片内定时器
|        +exti.c               外部中断
|	 
+cpu:               stm32f0xx标准库
+lib:               库函数
|
|//输出文件
+生成               xxxxxx.bin 
|
|//帮助文件
+说明:
|     readme.txt    本文件

==========================================================================
				线程的自动启动
==========================================================================
1.修饰宏:定义一个线程，它自动启动
#define AUTOSTART_THREAD_WITH_TIMEOUT(name)     //带延时变量
#define AUTOSTART_THREAD_WITHOUT_TIMEOUT(name)  //不带延时变量

2.实现原理:
  使用  AUTOSTART_PROCESSES(thread_##name);
        它包含了  __attribute__((section("autostart")))
  ===》所有线程被定位到了  autostart 段
 
3.main函数使用 process_start(&etimer_process,NULL); //启动 
  启动所有线程

==========================================================================
                 iic 与  ir 接口的 统一
==========================================================================
				
==========================================================================
                 任务描述
==========================================================================
	
==========================================================================
                 排队算法
==========================================================================

==========================================================================
                 充电流程
==========================================================================

==========================================================================
                 仓道数据被清0的几种情况 
==========================================================================
1.充电宝读几次失败，      数据清0
2.运维 或 强制 弹仓 成功  数据清0
3.租借成功                数据清0
